Part 2 Docker Compose
1, Checking if docker compose is installed on your machine by viewing its version
docker-compose --version
Docker Compose version v2.27.0-desktop.2

Compile and package each microservice into a JAR file.
Run docker-compose up -d to start all services in detached mode.
docker-compose up -d
Verify that the services are running by checking the logs or using docker-compose exec to access the containerâ€™s shell.
docker-compose exec
Stopping docker compose launched services
docker-compose stop


Ctrl+C to quit the no detached mode and stop the services

2, Rebuilding the images when running docker-compose up command
docker-compose up --build

An example of a docker-compose.yml file
version: '3'
services:
  gateway:
    build: .
    image: my-gateway:latest
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DB_USERNAME: username
      DB_PASSWORD: password
    depends_on:
      - db
      - redis

  db:
    image: postgres
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydatabase

  redis:
    image: redis:alpine

    
services:
  gateway:
    build: ./gateway
    ports:
      - "8080:8080"
    depends_on:
      - config-service
      - bank-account-service

  config-service:
    build: ./config-service
    environment:
      SPRING_PROFILES_ACTIVE: dev

  bank-account-service:
    build: ./bank-account-service
    environment:
      SPRING_PROFILES_ACTIVE: dev

  # Optional: Database or other shared services
  database:
    image: postgres
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    volumes:
      - db-data:/var/lib/postgresql/data

volumes:
  db-data:
  
  
  
services:
  gateway:
    build: ./gateway
    ports:
      - "8084:8084"
# This will make the "mysql" service launched before the "gateway" service
	depends_on:
      - registryservice
      - mysql
    environment:
      SPRING_PROFILES_ACTIVE: prod
  registryservice:
# "registryservice" microservice is built from its directory relative to the docker-compose file under which there should be a Dockerfile defined for the building process
    build: ./registryservice
# The exposing port
    ports:
      - "8099:8099"
    environment:
      SPRING_PROFILES_ACTIVE: prod
  mysql:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: manolo
      MYSQL_DATABASE: test
      MYSQL_USER: jose
      MYSQL_PASSWORD: jose
    volumes:
      - mysql-data:/var/lib/mysql
volumes:
  mysql-data: